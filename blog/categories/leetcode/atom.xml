<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | ArtemisYY's Blog]]></title>
  <link href="http://ArtemisYY.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://ArtemisYY.github.io/"/>
  <updated>2013-08-04T22:18:06+08:00</updated>
  <id>http://ArtemisYY.github.io/</id>
  <author>
    <name><![CDATA[ArtemisYY]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binary Tree Level Order Traversal]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/08/04/binary-tree-level-order-traversal/"/>
    <updated>2013-08-04T22:01:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/08/04/binary-tree-level-order-traversal</id>
    <content type="html"><![CDATA[<p>Leetcode 102, 107. 没写完。</p>

<p>Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).    <!--more-->
For example:
Given binary tree {3,9,20,#,#,15,7},</p>

<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre>

<p>return its level order traversal as:[ [3],[9,20],[15,7] ]</p>

<p>解题思路：  <br/>
(1).广度优先BFS，用队列.</p>

<ul>
<li>两个队列，分别记录当前层和下一层的结点.</li>
<li>一个队列，以及整型count，nextCount，分别记录当前层和下一层的结点个数.<br>
(2).深度优先DFS.还有点问题.</li>
</ul>


<p>===================================================================================================================
```java leetcode102.java
public  ArrayList&lt;ArrayList<Integer>> levelOrder(TreeNode root) {</p>

<pre><code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt; traversal = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
if( root == null)
return traversal;
ArrayList&lt;Integer&gt; level = new ArrayList&lt;Integer&gt;();
Queue&lt; TreeNode&gt; upper = new LinkedList&lt;TreeNode&gt;();
Queue&lt;TreeNode&gt; lower = new LinkedList&lt;TreeNode&gt;();
upper.add(root);
while( !upper.isEmpty() || !lower.isEmpty())
{
    ArrayList&lt;Integer&gt; tempList = new ArrayList&lt;Integer&gt;();
    while(!upper.isEmpty())
    {
        TreeNode tempNode = upper.peek();
        tempList.add(tempNode.val);
        if( tempNode.left != null)
            lower.add(tempNode.left);
        if(tempNode.right != null)
            lower.add(tempNode.right);
        upper.poll();
    }
    level = new ArrayList&lt;Integer&gt;(tempList);//注意一定得这么干，否则直接加tempList, 出了作用域就没了。-_-|||
    traversal.add(level);
    for( TreeNode node : lower)
        upper.add(node);
    lower.clear();
}

return traversal;
</code></pre>

<p>}  <br/>
<code>
</code>java leetcode102.java
 public static ArrayList&lt;ArrayList<Integer>> levelOrder(TreeNode root) {</p>

<pre><code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt; traversal = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
if( root == null)
    return traversal;
Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();
queue.add(root);
int count = 1;
ArrayList&lt;Integer&gt; level;
while(!queue.isEmpty())
{
    level = new ArrayList&lt;Integer&gt;();
    int nextCount = 0;
    for( int i=0; i&lt;count; i++)
    {
        TreeNode temp = queue.poll();
        level.add(temp.val);
        if( temp.left != null)
        {
            queue.add(temp.left);
            nextCount++;
        }
        if(temp.right != null)
        {
            queue.add(temp.right);
            nextCount++;
        }
    }
    traversal.add(level);
    count = nextCount;

}
return traversal;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Consecutive Sequence]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/08/04/longest-consecutive-sequence/"/>
    <updated>2013-08-04T19:46:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/08/04/longest-consecutive-sequence</id>
    <content type="html"><![CDATA[<p>Leetcode 128， 无序数组求最长连续序列的长度。要求时间复杂度位O(log N).    <br/>
最直观的想法，先排序，然后求最长连续序列的长度。但是时间复杂度位O(N log N). <!--more--></p>

<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>

<p>For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.  <br/>
Your algorithm should run in O(n) complexity.</p>

<p>解题思路：从当前元素分别递减和递增寻找，一次就把包含当前原色连续序列找全。找全后，清空所有找到的元素，保证下次不会重复寻找。如何从O(1）时间内找到一个数，hash或者set。</p>

<p>涉及到“在未排序集合中寻找有序集合”的题目，可以考虑本题的思路。</p>

<p>==============================================================================</p>

<p>1.O(N log N) 排序，没搞明白为什么runtime error，超时？可是有人说用排序也过了的啊～  <br/>
```java leetcode128.java
public int longestConsecutive(int[] num) {</p>

<pre><code>quickSort(num, 0, num.length-1);
int maxLength = 1;
int tempLength = 1;
for( int i = 1; i&lt; num.length; i++)
{
    if(num[i] == num[i-1]+1)
    {
        tempLength++;
        maxLength = Math.max(maxLength, tempLength);
        continue;
    }
    else{
        if( num[i] == num[i-1])
            continue;
    }
    tempLength = 1;
    }
return maxLength;
</code></pre>

<p>}</p>

<p>public void quickSort(int[] num, int left, int right)
{</p>

<pre><code>if( left &lt; right)
{
    int position = Partition(num, left, right);
    quickSort(num, left, position-1);
    quickSort(num, position+1, right);
}
</code></pre>

<p>}</p>

<p>public int Partition(int[] num, int left, int right) {</p>

<pre><code>int temp = num[left];
int tempPosition = left;
for( int i= left+1; i&lt;= right; i++)
{
    if( num[i] &lt; temp)
    {
        tempPosition++;
        if( tempPosition !=i )
        {
                num[i] = num[i] + num[tempPosition];
                num[tempPosition] = num[i] - num[tempPosition];
                num[i] = num[i] - num[tempPosition];
        }
    }
}
num[left] = num[tempPosition];
num[tempPosition] = temp;
return tempPosition;
</code></pre>

<p>}
<code>   
2. O(N)思路很巧妙，以后记得借鉴。   
</code>java leetcode128.java
public int longestConsecutive(int[] num) {</p>

<pre><code>Set&lt;Integer&gt; save = new HashSet&lt;Integer&gt;();
for(int i : num)
{
    save.add(i);
}

int maxLength = 1;
for(int i : num)
{
    maxLength = Math.max(maxLength, getLength(save, i, false)+getLength(save, i+1, true));
}
return maxLength;
</code></pre>

<p>}</p>

<p>public int getLength(Set<Integer> save, int i, boolean ascending)
{</p>

<pre><code>int count = 0;
while(save.contains(i))
{
    count++;
    save.remove(i);
    if(ascending)
        i++;
    else i--;
}
return count;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path Sum]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/08/04/path-sum/"/>
    <updated>2013-08-04T16:05:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/08/04/path-sum</id>
    <content type="html"><![CDATA[<p>两道题(Leetcode 112-113) 二叉树从根结点到叶结点求和问题，递归求解。</p>

<ol>
<li>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</li>
<li>Given a binary tree and a sum, find all root-to-leaf paths where each path&rsquo;s sum equals the given sum.<!--more--></li>
</ol>


<p>For example:
Given the below binary tree and sum = 22,</p>

<pre><code>          5
         / \
        4   8
       /   / \
      11  13  4
     /  \      \
    7    2      1
</code></pre>

<ol>
<li>return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.</li>
<li>return[ [5,4,11,2], [5,8,4,5]]</li>
</ol>


<p>=================================================================================
```java Leetcode112.java
 public boolean hasPathSum(TreeNode root, int sum) {</p>

<pre><code> if( root == null)
    return false;
 else if( root.left == null &amp;&amp; root.right == null )
 {
    return (root.val == sum);
 }
 else {
    return hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);
 }
</code></pre>

<p>}
```</p>

<p>```java Leetcode113.java
public ArrayList&lt;ArrayList<Integer>> pathSum(TreeNode root, int sum) {</p>

<pre><code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
helpPathSum(root, sum, new ArrayList&lt;Integer&gt;(), result);
return result;
</code></pre>

<p>}</p>

<p>public void helpPathSum(TreeNode root, int sum, ArrayList<Integer> tempPath, ArrayList&lt;ArrayList<Integer>> result)
{</p>

<pre><code>if( root == null) return;
tempPath.add(root.val);
if( root.left == null &amp;&amp; root.right == null){
    if( root.val == sum)
    {
        ArrayList&lt;Integer &gt; path = new ArrayList&lt;Integer&gt;(tempPath);//必须拷贝一份新的。
        result.add(path);//找到路径，添加。
    }

}else {
    helpPathSum(root.left, sum-root.val, tempPath, result);
    helpPathSum(root.right, sum - root.val, tempPath, result);
}
tempPath.remove(tempPath.size()-1);//返回树上一层
</code></pre>

<p>}
```</p>

<p>Reference： <a href="http://discuss.leetcode.com/questions/279/path-sum-ii">http://discuss.leetcode.com/questions/279/path-sum-ii</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Time to Buy and Sell Stock]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/07/31/best-time-to-buy-and-sell-stock/"/>
    <updated>2013-07-31T17:02:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/07/31/best-time-to-buy-and-sell-stock</id>
    <content type="html"><![CDATA[<p>三道题(Leetcode 121 —— 123) <br/>
Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>

<ul>
<li>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</li>
<li>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>
<li>Design an algorithm to find the maximum profit. You may complete at most two transactions.<!--more--></li>
</ul>


<p>=================================================================================
解题思路：       <br/>
(1) 寻找序列整数的最大差，且小数出现在前面。 <br/>
(2) 寻找连续递增空间。 <br/>
(3) 将数组(0——i, i+1——n-1)两部分，left[i] 和 right[j]分别记录0——i, j——n-1两部分可获取的最大利润</p>

<p>```java Leetcode121.java
//elegent code
public int maxProfit(int[] prices) {</p>

<pre><code> if(prices.length &lt; 2)
     return 0;
 int max = 0;
 int distance = 0;
 for( int i = 1; i &lt; prices.length; i++)
 {
     distance = prices[i] - prices[i-1] + Math.max(distance, 0);
     max = (distance &gt; max) ? distance :max;
 }
return max;
</code></pre>

<p>}
// my ugly code
public int maxProfit(int[] prices) {</p>

<pre><code>  if(prices.length &lt; 2)
         return 0;
  int max = 0;
  int min = prices[0];
  for( int i = 1; i &lt; prices.length; i++)
  {
     if(prices[i] - min &gt; max)
     max = prices[i] - min;
     min = (prices[i] &lt; min ) ? prices[i] : min;
  }
  return max;
</code></pre>

<p> }
<code>
</code>java Leetcode122.java
public int maxProfit(int[] prices) {</p>

<p>  if(prices.length &lt; 2)</p>

<pre><code> return 0;
</code></pre>

<p>  int max = 0;
  int start = prices[0];
  for( int i = 1; i &lt; prices.length; i++ )
  {</p>

<pre><code>  if( prices[i]- prices[i-1] &gt; 0)
     continue;
  max += prices[i-1] - start;
  start = prices[i];
</code></pre>

<p>  }</p>

<p>  max += prices[prices.length &ndash; 1] -start;
  return max;</p>

<pre><code>}
</code></pre>

<p>}
<code>
</code>java Leetcode123.java
public int maxProfit(int[] prices) {</p>

<pre><code>if( prices.length &lt; 2)
return 0;
int left[] = new int[prices.length];
int right[] = new int [prices.length];
int min = prices[0];
int maxP = 0;
left[0] = 0;
for( int i = 1; i &lt; prices.length; i++)
{
    left[i] = Math.max(left[i-1], prices[i] - min) ;
    if( prices[i] &lt; min)
        min = prices[i];
}
right[prices.length - 1] = 0;
int max = prices[prices.length -1];
for( int i = prices.length-2; i&gt;=0; i--)
{
right[i] = Math.max(right[i+1], max - prices[i] ) ;
if( prices[i] &gt; max)
    max = prices[i];
}

maxP = Math.max(left[prices.length -1], right[0]);
for( int i=0; i&lt; prices.length-2; i++)
    if(maxP &lt; left[i]+ right[i+1])
        maxP = left[i]+ right[i+1];

return maxP;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sum Root to Leaf Numbers]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/07/31/sum-root-to-leaf-numbers/"/>
    <updated>2013-07-31T16:34:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/07/31/sum-root-to-leaf-numbers</id>
    <content type="html"><![CDATA[<p>(Leetcode 129)   <br/>
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number. <br/>
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers. <br/>
For example,</p>

<pre><code>  1
 / \
2   3
</code></pre>

<p>The root-to-leaf path 1->2 represents the number 12. <br/>
The root-to-leaf path 1->3 represents the number 13. <br/>
Return the sum = 12 + 13 = 25.   <!--more--></p>

<p>===================================================================================
解题思路： 递归求解。叶结点返回sum，否则每下一层sum*10+node.val. 简单题.</p>

<p>```java Leetcode129.java
public int sumNumbers(TreeNode root) {</p>

<pre><code>        // Start typing your Java solution below
        // DO NOT write main() function


     int prefix = 0;
     return calculateSum( root,  prefix );

    }
</code></pre>

<p>int calculateSum(TreeNode root, int prefix)
{</p>

<pre><code>if( root == null)
   return 0;

prefix = prefix*10 + root.val;
if( root.left == null &amp;&amp; root.right == null)
   return prefix;
return calculateSum(root.left, prefix) + calculateSum(root.right, prefix);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
