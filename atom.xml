<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ArtemisYY's Blog]]></title>
  <link href="http://ArtemisYY.github.io/atom.xml" rel="self"/>
  <link href="http://ArtemisYY.github.io/"/>
  <updated>2013-07-31T16:59:15+08:00</updated>
  <id>http://ArtemisYY.github.io/</id>
  <author>
    <name><![CDATA[ArtemisYY]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sum Root to Leaf Numbers]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/07/31/sum-root-to-leaf-numbers/"/>
    <updated>2013-07-31T16:34:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/07/31/sum-root-to-leaf-numbers</id>
    <content type="html"><![CDATA[<p>(Leetcode 129)   <br/>
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number. <br/>
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers. <br/>
For example,</p>

<pre><code>  1
 / \
2   3
</code></pre>

<p>The root-to-leaf path 1->2 represents the number 12. <br/>
The root-to-leaf path 1->3 represents the number 13. <br/>
Return the sum = 12 + 13 = 25.</p>

<p>===================================================================================
解题思路： 递归求解。叶结点返回sum，否则每下一层sum*10+node.val. 简单题.</p>

<figure class='code'><figcaption><span>Leetcode129.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumNumbers</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Start typing your Java solution below</span>
</span><span class='line'>          <span class="c1">// DO NOT write main() function</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>       <span class="kt">int</span> <span class="n">prefix</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>       <span class="k">return</span> <span class="nf">calculateSum</span><span class="o">(</span> <span class="n">root</span><span class="o">,</span>  <span class="n">prefix</span> <span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">calculateSum</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prefix</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">prefix</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">prefix</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">calculateSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">prefix</span><span class="o">)</span> <span class="o">+</span> <span class="n">calculateSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">prefix</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Palindrome Partitioning]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/07/27/leetcode-131-and-132-palindrome-partitioning/"/>
    <updated>2013-07-27T17:51:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/07/27/leetcode-131-and-132-palindrome-partitioning</id>
    <content type="html"><![CDATA[<p>两道题(Leetcode 131 &amp; 132)都是<strong><big>字符串回文分割问题</big></strong>：<br/>
Given a string s, partition s such that every substring of the partition is a palindrome.<br/>
   1. Return all possible palindrome partitioning of s. <br/>
   2. Return the minimum cuts needed for a palindrome partitioning of s.</p>

<pre><code>For example, given s = "aab",  
1. Return [["aa","b"],["a","a","b"]]  
2. Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
</code></pre>

<p>===================================================================================
解题思路，动态规划：(和矩阵链相乘时，使乘法次数达到最小的运算顺序思路类似。)<br/>
这题比较有意思的是，两个动态规划的思路嵌在一起了。   <br><br>
  1. 用isPa[i][j]矩阵记录S.subString(i,j)是否为回文。 <br/>
  2. 针对不同的问题，根据isPa[i][j]矩阵输出不同结果： <br/>
   + 详细分割串（递归输出）：Start 到 End的所有回文分割串是Start到i,i到End的所有回文分割方法的组合。<br/>
   + 最小分割次数（DP）：用dpMin[j]记录s.subString(0,j)的最小分割次数。</p>

<pre><code>  dpMin[j] = Min{dpMin[j], 1+dpMin[i-1]} （i在0——j， 且s.subString(i,j)为回文）
</code></pre>

<p>===================================================================================</p>

<ul>
<li>注意递归输出所有可能的划分时的思路。</li>
</ul>


<figure class='code'><figcaption><span>Leetcode131.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Palindrome</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="nf">partition</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span> <span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="o">[][]</span> <span class="n">isPa</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">isPa</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">d</span><span class="o">++)</span>
</span><span class='line'>          <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">d</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">d</span><span class="o">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">isPa</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">isPa</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="n">isPa</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">printResult</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">isPa</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="nf">printResult</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">boolean</span> <span class="o">[][]</span> <span class="n">isPa</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">pa</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">pa</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">pa</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>        
</span><span class='line'>      <span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">isPa</span><span class="o">[</span><span class="n">start</span><span class="o">][</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>              <span class="k">for</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">subPa</span> <span class="o">:</span> <span class="n">printResult</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">isPa</span><span class="o">))</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">subPa</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>                  <span class="n">pa</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">subPa</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">pa</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="n">Palindrome</span> <span class="n">palindrome</span>  <span class="o">=</span> <span class="k">new</span> <span class="n">Palindrome</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">s</span><span class="o">=</span><span class="s">&quot;11bbcdcw&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">palindrome</span><span class="o">.</span><span class="na">partition</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注意更新isPa[][]的顺序。</li>
</ul>


<figure class='code'><figcaption><span>Leetcode132.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minCut</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>     <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dpMin</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="n">dpMin</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>  
</span><span class='line'>  <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">isPa</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">((</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">isPa</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">])))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">isPa</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>                  <span class="n">dpMin</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dpMin</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">dpMin</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                  <span class="n">dpMin</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">dpMin</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>reference:  <br/>
<a href="http://discuss.leetcode.com/questions/1265/palindrome-partitioning">http://discuss.leetcode.com/questions/1265/palindrome-partitioning</a>  <br/>
<a href="http://discuss.leetcode.com/questions/1266/palindrome-partitioning-ii">http://discuss.leetcode.com/questions/1266/palindrome-partitioning-ii</a></p>

<p>现阶段全部笨办法，有空看看别人的优化思路吧（700ms距离36ms也许是世界上最遥远的距离）。 <br/>
<a href="http://www.cnblogs.com/shawnhue/archive/2013/05/19/leetcode_132.html">http://www.cnblogs.com/shawnhue/archive/2013/05/19/leetcode_132.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to ArtemisYY's Blog]]></title>
    <link href="http://ArtemisYY.github.io/blog/2013/06/26/welcome-to-artemisyys-blog/"/>
    <updated>2013-06-26T15:14:00+08:00</updated>
    <id>http://ArtemisYY.github.io/blog/2013/06/26/welcome-to-artemisyys-blog</id>
    <content type="html"><![CDATA[<p>啦啦啦啦啦啦～ 终于搭出来一个最简单的版本了～发篇博记录一下！</p>

<p>虽然极其简单以及丑陋，但是足以证明Artemis虽然笨，但也不是那么笨的撒～慢慢就会好啦～</p>

<p>我一定会好好管理这个Blog的，对灯发誓！</p>

<p>好了，请自觉看书去。再玩octopress剁手！</p>
]]></content>
  </entry>
  
</feed>
